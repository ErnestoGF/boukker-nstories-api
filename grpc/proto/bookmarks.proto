syntax = "proto3";

package stories;

option go_package = "github.com/ErnestoGF/boukker-nstories-api/grpc/go/v2/storiespb";

import "commons.proto";

// ================= requests ================= //

// RequestCreateBookmark ...
message RequestCreateBookmark {
  // ResourceID puede ser:
  //
  // ID de una historia el Path tiene q estar vacio.
  // ID de un capitulo el Path tiene q tener algun valor.
  string ResourceID = 1;
  string Abstract = 2;
  // Path ruta donde apunta el marcador
  //
  // Path vacio indica q el marcador es para leer mas tarde una historia
  // Path no vacio indica q es un marcador en el texto de un capitulo
  string Path = 3;
}

// RequestEditBookmark ...
message RequestEditBookmark {
  string ID = 1;
  // ResourceID puede ser:
  //
  // ID de una historia el Path tiene q estar vacio.
  // ID de un capitulo el Path tiene q tener algun valor.
  string ChapterID = 2;
  string Abstract = 3;
  string Path = 4;
}

// RequestMyBookmarks ...
message RequestMyBookmarks {
  LoadBookmarkType Load = 1;
  bool LoadTotal = 2;
  FilterMyBookmarks Filter = 3;
  BookmarkSort Sort = 4;
  Paginator Paginator = 5;
}

// ================= response ================= //

// ResponseMyBookmarks ...
message ResponseMyBookmarks {
  uint64 Total = 1;
  repeated Bookmark Bookmarks = 2;
}

// ================= request models ================= //

// ================= response models ================= //

// Bookmark ...
message Bookmark {
  string ID = 1;
  string UserID = 2;
  StorySimple Story = 3;
  ChapterSimple Chapter = 4;
  string Abstract = 6;
  string Path = 7;
  int64 CreatedAt = 8;
  int64 UpdatedAt = 9;
}

// ================= filters ================= //

// FilterMyBookmarks ...
message FilterMyBookmarks {
  string StoryWriterID = 1;
  // WordsOnTitle palabras q contiene el titulo
  string StoryWordsOnTitle = 2;
  repeated string StoryCategoriesID = 3;
  int64 StoryStartPublishedAt = 4;
  int64 StoryEndPublishedAt = 5;
  BoolOption StoryIsFinished = 6;
}

// ================= sort ================= //

// BookmarkSort ...
message BookmarkSort {
  enum FieldBy {
    IGNORE = 0;
    STORY_TITLE = 1;
    STORY_WRITER = 2;
    BOOKMARK_MIX_DATE = 3;
  }
  FieldBy By = 1;
  bool Descendent = 2;
}

// ================= types ================= //

// LoadBookmarkType ...
enum LoadBookmarkType {
  LBT_IGNORE = 0;
  LBT_BOOKMARK = 1;
  LBT_READLATER = 2;
}
