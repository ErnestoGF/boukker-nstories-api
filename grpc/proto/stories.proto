syntax = "proto3";

package stories;

option go_package = "github.com/ErnestoGF/boukker-nstories-api/grpc/go/v2/storiespb";

import "google/protobuf/empty.proto";

import "commons.proto";
import "chapters.proto";
import "bookmarks.proto";
import "readings.proto";

service stories {
  // ================= stories ================= //

  // WriteStory ...
  rpc WriteStory(RequestWriteStory) returns (ResponseID);

  // EditStory actualiza los datos de la historia
  rpc EditStory(RequestEditStory) returns (google.protobuf.Empty);

  // ChangeFinished pone o quita si una historia llego a su fin
  rpc ChangeFinished(RequestChangeFinished) returns (google.protobuf.Empty);

  // RemoveStory ...
  rpc RemoveStory(RequestRemoveStory) returns (google.protobuf.Empty);

  // MyStories lista las historias del usuario logueado
  rpc MyStories(RequestMyStories) returns (stream ResponseMyStories);

  // ListStories lista historias publicas
  rpc ListStories(RequestListStories) returns (stream ResponseListStories);

  // RetrieveStory recupera una historia
  //
  // Si la historia NO es publica solo se retorna si el usuario logueado es su
  // escritor o si la peticion es callType=SYSTEM.
  rpc RetrieveStory(RequestID) returns (ResponseRetrieveStory);

  // === commons story and chapters === //

  // ChangeStatus cambia el estado de la historia y/o capitulos.
  //
  // Acciones:
  // * Cambia el estado de la historia y todos sus capitulos si ChaptersID esta
  // vacio.
  // * Cambia el estado de los capitulos q vienen en ChaptersID y si corresponde
  // tambien se cambiara el estado de la historia.
  rpc ChangeStatus(RequestChangeStoryStatus) returns (google.protobuf.Empty);

  // ChangeCover cambia el cover a  la historia y/o capitulos segun los datos de
  // la peticion
  rpc ChangeCover(RequestChangeCover) returns (google.protobuf.Empty);

  // ================= chapters ================= //

  // WriteChapter ...
  rpc WriteChapter(RequestWriteChapter) returns (ResponseID);

  // EditChapter actualiza los datos de un capitulo
  rpc EditChapter(RequestEditChapter) returns (google.protobuf.Empty);

  // ReorderChapters ...
  rpc ReorderChapters(RequestReorderChapters) returns (google.protobuf.Empty);

  // RemoveChapter ...
  rpc RemoveChapter(RequestRemoveChapter) returns (google.protobuf.Empty);

  // RemoveChapterCover ...
  rpc RemoveChapterCover(RequestRemoveChapterCover)
      returns (google.protobuf.Empty);

  // RetrieveStory recupera un capitulo
  //
  // Si el capitulo o la hsitoria NO son publicos solo se retorna si el usuario
  // logueado es su escritor o si la peticion es callType=SYSTEM.
  rpc RetrieveChapter(RequestID) returns (ResponseRetrieveChapter);

  // ReadChapter leer un capitulo de una historia.
  //
  // Si el capitulo o la historia NO son publicos solo se retorna si el usuario
  // logueado es su escrito.
  rpc ReadChapter(RequestID) returns (ResponseReadChapter);

  // ================= bookmarks ================= //

  // CreateBookmark marca un capitulo
  rpc CreateBookmark(RequestCreateBookmark) returns (ResponseID);

  // EditBookmark edita un marcador
  rpc EditBookmark(RequestEditBookmark) returns (google.protobuf.Empty);

  // RemoveBookmark elimina un marcador
  rpc RemoveBookmark(RequestID) returns (google.protobuf.Empty);

  // MyBookmarks lista mis marcadores
  rpc MyBookmarks(RequestMyBookmarks) returns (stream ResponseMyBookmarks);

  // ================= reading ================= //

  // SaveReading salva en porciento la cantidad q ha leido un usuario en un capitulo
  rpc SaveReading(RequestSaveReading) returns (google.protobuf.Empty);
}

// ================= requests ================= //

// RequestWriteStory ...
message RequestWriteStory {
  string Title = 1;
  string Author = 2;
  bool IsMy = 3;
  repeated string Tags = 4;
  string CategoryID = 5;
  string LanguageID = 6;
  string TokenCover = 7;

  repeated string Characters = 8;

  AudienceType Audience = 9;
  CopyrightType Copyright = 10;
  ClasificationType Clasification = 11;
  CommentModerationType CommentsModeration = 12;

  string Description = 13;
}

// RequestEditStory ...
message RequestEditStory {
  string ID = 1;

  string Title = 2;
  repeated string Tags = 3;
  string CategoryID = 4;

  repeated string Characters = 5;

  AudienceType Audience = 6;
  CopyrightType Copyright = 7;
  ClasificationType Clasification = 8;
  CommentModerationType CommentsModeration = 9;

  string Description = 10;
}

// RequestChangeFinished
message RequestChangeFinished {
  string ID = 1;
  bool Finished = 2;
}

// RequestChangeStoryStatus ...
message RequestChangeStoryStatus {
  string ID = 1;
  repeated string ChaptersID = 2;
  StatusType Status = 3;
}

// RequestRemoveStory ...
message RequestRemoveStory { string ID = 1; }

// RequestChangeCover cambiar el cover de la historia o el capitulo segun el
// destino del cover
message RequestChangeCover {
  enum Dst {
    IGNORE = 0;
    STORY = 1;
    CHAPTER = 2;
  }
  string ID = 1;
  string Token = 2;
  Dst Destination = 3;
}

// RequestMyStories ...
message RequestMyStories {
  bool LoadTotal = 1;
  FilterMyStories Filter = 2;
  StoriesSort Sort = 3;
  Paginator Paginator = 4;
}

// RequestListStories ...
message RequestListStories {
  bool LoadTotal = 1;
  FilterStories Filter = 2;
  StoriesSort Sort = 3;
  Paginator Paginator = 4;
}

// ================= responses ================= //

// ResponseMyStories ...
message ResponseMyStories {
  uint64 Total = 1;
  repeated Story Stories = 2;
}

// ResponseListStories ...
message ResponseListStories {
  uint64 Total = 1;
  repeated Story Stories = 2;
}

// ResponseRetrieveStory ...
message ResponseRetrieveStory { Story Story = 1; }

// ================= info ================= //

// ================= request models ================= //

// ================= response models ================= //

// ================= filters ================= //

// FilterMyStories ...
message FilterMyStories {
  StatusType Status = 1;
  // WordsOnTitle palabras q contiene el titulo
  string WordsOnTitle = 2;
  string CategoryID = 3;
  int64 StartPublishedAt = 4;
  int64 EndPublishedAt = 5;
  BoolOption IsFinished = 6;
}

// FilterStories ...
message FilterStories {
  string WriterID = 1;
  // WordsOnTitle palabras q contiene el titulo
  string WordsOnTitle = 2;
  string CategoryID = 3;
  int64 StartPublishedAt = 4;
  int64 EndPublishedAt = 5;
  BoolOption IsFinished = 6;
}

// ================= sort ================= //

// StoriesSort ...
message StoriesSort {
  enum FieldBy {
    IGNORE = 0;
    TITLE = 1;
    PUBLISHED_AT = 2;
    CREATED_AT = 3;
  }
  FieldBy By = 1;
  bool Descendent = 2;
}

// ================= types ================= //