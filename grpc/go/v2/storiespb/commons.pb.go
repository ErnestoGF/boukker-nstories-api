// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: commons.proto

package storiespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusType int32

const (
	StatusType_ST_IGNORE StatusType = 0
	StatusType_ST_DRAFT  StatusType = 1
	StatusType_ST_PUBLIC StatusType = 2
)

// Enum value maps for StatusType.
var (
	StatusType_name = map[int32]string{
		0: "ST_IGNORE",
		1: "ST_DRAFT",
		2: "ST_PUBLIC",
	}
	StatusType_value = map[string]int32{
		"ST_IGNORE": 0,
		"ST_DRAFT":  1,
		"ST_PUBLIC": 2,
	}
)

func (x StatusType) Enum() *StatusType {
	p := new(StatusType)
	*p = x
	return p
}

func (x StatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[0].Descriptor()
}

func (StatusType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[0]
}

func (x StatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusType.Descriptor instead.
func (StatusType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{0}
}

// ReactionType ...
type ReactionType int32

const (
	ReactionType_RT_IGNORE ReactionType = 0
	ReactionType_RT_LIKE   ReactionType = 1
	ReactionType_RT_VIEW   ReactionType = 2
)

// Enum value maps for ReactionType.
var (
	ReactionType_name = map[int32]string{
		0: "RT_IGNORE",
		1: "RT_LIKE",
		2: "RT_VIEW",
	}
	ReactionType_value = map[string]int32{
		"RT_IGNORE": 0,
		"RT_LIKE":   1,
		"RT_VIEW":   2,
	}
)

func (x ReactionType) Enum() *ReactionType {
	p := new(ReactionType)
	*p = x
	return p
}

func (x ReactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[1].Descriptor()
}

func (ReactionType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[1]
}

func (x ReactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReactionType.Descriptor instead.
func (ReactionType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{1}
}

// AudienceType ...
type AudienceType int32

const (
	AudienceType_AT_IGNORE AudienceType = 0
	// AT_ALL all
	AudienceType_AT_ALL AudienceType = 1
	// AT_YOUNG 13-18 years
	AudienceType_AT_YOUNG AudienceType = 2
	// AT_ADULT +18 years
	AudienceType_AT_ADULT AudienceType = 3
)

// Enum value maps for AudienceType.
var (
	AudienceType_name = map[int32]string{
		0: "AT_IGNORE",
		1: "AT_ALL",
		2: "AT_YOUNG",
		3: "AT_ADULT",
	}
	AudienceType_value = map[string]int32{
		"AT_IGNORE": 0,
		"AT_ALL":    1,
		"AT_YOUNG":  2,
		"AT_ADULT":  3,
	}
)

func (x AudienceType) Enum() *AudienceType {
	p := new(AudienceType)
	*p = x
	return p
}

func (x AudienceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudienceType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[2].Descriptor()
}

func (AudienceType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[2]
}

func (x AudienceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudienceType.Descriptor instead.
func (AudienceType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{2}
}

// CopyrightType ...
type CopyrightType int32

const (
	CopyrightType_CRT_IGNORE                              CopyrightType = 0
	CopyrightType_CRT_ALL_RIGHTS_RESERVED                 CopyrightType = 1
	CopyrightType_CRT_PUBLIC_DOMAIN                       CopyrightType = 2
	CopyrightType_CRT_CREATIVE_COMMONS_ATTRIBUTION        CopyrightType = 3
	CopyrightType_CRT_CC_ATTRIB_NON_COMMERCIAL            CopyrightType = 4
	CopyrightType_CRT_CC_ATTRIB_NON_COMMERCIAL_NO_DERIVS  CopyrightType = 5
	CopyrightType_CRT_CC_ATTRIB_NON_COMMERCIAL_SHAREALIKE CopyrightType = 6
	CopyrightType_CRT_CC_ATTRIBUTION_SHAREALIKE           CopyrightType = 7
	CopyrightType_CRT_CC_ATTRIBUTION_NO_DERIVS            CopyrightType = 8
)

// Enum value maps for CopyrightType.
var (
	CopyrightType_name = map[int32]string{
		0: "CRT_IGNORE",
		1: "CRT_ALL_RIGHTS_RESERVED",
		2: "CRT_PUBLIC_DOMAIN",
		3: "CRT_CREATIVE_COMMONS_ATTRIBUTION",
		4: "CRT_CC_ATTRIB_NON_COMMERCIAL",
		5: "CRT_CC_ATTRIB_NON_COMMERCIAL_NO_DERIVS",
		6: "CRT_CC_ATTRIB_NON_COMMERCIAL_SHAREALIKE",
		7: "CRT_CC_ATTRIBUTION_SHAREALIKE",
		8: "CRT_CC_ATTRIBUTION_NO_DERIVS",
	}
	CopyrightType_value = map[string]int32{
		"CRT_IGNORE":                              0,
		"CRT_ALL_RIGHTS_RESERVED":                 1,
		"CRT_PUBLIC_DOMAIN":                       2,
		"CRT_CREATIVE_COMMONS_ATTRIBUTION":        3,
		"CRT_CC_ATTRIB_NON_COMMERCIAL":            4,
		"CRT_CC_ATTRIB_NON_COMMERCIAL_NO_DERIVS":  5,
		"CRT_CC_ATTRIB_NON_COMMERCIAL_SHAREALIKE": 6,
		"CRT_CC_ATTRIBUTION_SHAREALIKE":           7,
		"CRT_CC_ATTRIBUTION_NO_DERIVS":            8,
	}
)

func (x CopyrightType) Enum() *CopyrightType {
	p := new(CopyrightType)
	*p = x
	return p
}

func (x CopyrightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyrightType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[3].Descriptor()
}

func (CopyrightType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[3]
}

func (x CopyrightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyrightType.Descriptor instead.
func (CopyrightType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{3}
}

// ClasificationType ...
type ClasificationType int32

const (
	ClasificationType_CT_IGNORE                      ClasificationType = 0
	ClasificationType_CT_ALL                         ClasificationType = 1
	ClasificationType_CT_LANGUAGE_ADULT_AND_VIOLENCE ClasificationType = 2
	ClasificationType_CT_EROTIC_SEXUAL               ClasificationType = 3
)

// Enum value maps for ClasificationType.
var (
	ClasificationType_name = map[int32]string{
		0: "CT_IGNORE",
		1: "CT_ALL",
		2: "CT_LANGUAGE_ADULT_AND_VIOLENCE",
		3: "CT_EROTIC_SEXUAL",
	}
	ClasificationType_value = map[string]int32{
		"CT_IGNORE":                      0,
		"CT_ALL":                         1,
		"CT_LANGUAGE_ADULT_AND_VIOLENCE": 2,
		"CT_EROTIC_SEXUAL":               3,
	}
)

func (x ClasificationType) Enum() *ClasificationType {
	p := new(ClasificationType)
	*p = x
	return p
}

func (x ClasificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClasificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[4].Descriptor()
}

func (ClasificationType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[4]
}

func (x ClasificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClasificationType.Descriptor instead.
func (ClasificationType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{4}
}

// CommentModerationType ...
type CommentModerationType int32

const (
	CommentModerationType_CMT_IGNORE CommentModerationType = 0
	CommentModerationType_CMT_NONE   CommentModerationType = 1
	CommentModerationType_CMT_MANUAL CommentModerationType = 2
	CommentModerationType_CMT_KATHE  CommentModerationType = 3
)

// Enum value maps for CommentModerationType.
var (
	CommentModerationType_name = map[int32]string{
		0: "CMT_IGNORE",
		1: "CMT_NONE",
		2: "CMT_MANUAL",
		3: "CMT_KATHE",
	}
	CommentModerationType_value = map[string]int32{
		"CMT_IGNORE": 0,
		"CMT_NONE":   1,
		"CMT_MANUAL": 2,
		"CMT_KATHE":  3,
	}
)

func (x CommentModerationType) Enum() *CommentModerationType {
	p := new(CommentModerationType)
	*p = x
	return p
}

func (x CommentModerationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentModerationType) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[5].Descriptor()
}

func (CommentModerationType) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[5]
}

func (x CommentModerationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentModerationType.Descriptor instead.
func (CommentModerationType) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{5}
}

// BoolOption ...
type BoolOption int32

const (
	BoolOption_BO_IGNORE BoolOption = 0
	BoolOption_BO_TRUE   BoolOption = 1
	BoolOption_BO_FALSE  BoolOption = 2
)

// Enum value maps for BoolOption.
var (
	BoolOption_name = map[int32]string{
		0: "BO_IGNORE",
		1: "BO_TRUE",
		2: "BO_FALSE",
	}
	BoolOption_value = map[string]int32{
		"BO_IGNORE": 0,
		"BO_TRUE":   1,
		"BO_FALSE":  2,
	}
)

func (x BoolOption) Enum() *BoolOption {
	p := new(BoolOption)
	*p = x
	return p
}

func (x BoolOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolOption) Descriptor() protoreflect.EnumDescriptor {
	return file_commons_proto_enumTypes[6].Descriptor()
}

func (BoolOption) Type() protoreflect.EnumType {
	return &file_commons_proto_enumTypes[6]
}

func (x BoolOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolOption.Descriptor instead.
func (BoolOption) EnumDescriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{6}
}

// RequestID ...
type RequestID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *RequestID) Reset() {
	*x = RequestID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestID) ProtoMessage() {}

func (x *RequestID) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestID.ProtoReflect.Descriptor instead.
func (*RequestID) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{0}
}

func (x *RequestID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// ResponseID ...
type ResponseID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ResponseID) Reset() {
	*x = ResponseID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseID) ProtoMessage() {}

func (x *ResponseID) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseID.ProtoReflect.Descriptor instead.
func (*ResponseID) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// CategoryInfo ...
type CategoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Transkey string `protobuf:"bytes,3,opt,name=Transkey,proto3" json:"Transkey,omitempty"`
}

func (x *CategoryInfo) Reset() {
	*x = CategoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryInfo) ProtoMessage() {}

func (x *CategoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryInfo.ProtoReflect.Descriptor instead.
func (*CategoryInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{2}
}

func (x *CategoryInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CategoryInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryInfo) GetTranskey() string {
	if x != nil {
		return x.Transkey
	}
	return ""
}

// LanguageInfo ...
type LanguageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Transkey string `protobuf:"bytes,3,opt,name=Transkey,proto3" json:"Transkey,omitempty"`
}

func (x *LanguageInfo) Reset() {
	*x = LanguageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LanguageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LanguageInfo) ProtoMessage() {}

func (x *LanguageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LanguageInfo.ProtoReflect.Descriptor instead.
func (*LanguageInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{3}
}

func (x *LanguageInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *LanguageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LanguageInfo) GetTranskey() string {
	if x != nil {
		return x.Transkey
	}
	return ""
}

// UserInfo ...
type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Fullname string `protobuf:"bytes,3,opt,name=Fullname,proto3" json:"Fullname,omitempty"`
	Avatar   string `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{4}
}

func (x *UserInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserInfo) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *UserInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

// StoryInfo ...
type StoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Cover string `protobuf:"bytes,3,opt,name=Cover,proto3" json:"Cover,omitempty"`
}

func (x *StoryInfo) Reset() {
	*x = StoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryInfo) ProtoMessage() {}

func (x *StoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryInfo.ProtoReflect.Descriptor instead.
func (*StoryInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{5}
}

func (x *StoryInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *StoryInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StoryInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

// ChapterInfo ...
type ChapterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title       string     `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Cover       string     `protobuf:"bytes,3,opt,name=Cover,proto3" json:"Cover,omitempty"`
	NumberPages int32      `protobuf:"varint,4,opt,name=NumberPages,proto3" json:"NumberPages,omitempty"`
	Position    int32      `protobuf:"varint,5,opt,name=Position,proto3" json:"Position,omitempty"`
	Status      StatusType `protobuf:"varint,6,opt,name=Status,proto3,enum=stories.StatusType" json:"Status,omitempty"`
	ReadingTime int64      `protobuf:"varint,7,opt,name=ReadingTime,proto3" json:"ReadingTime,omitempty"`
}

func (x *ChapterInfo) Reset() {
	*x = ChapterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChapterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChapterInfo) ProtoMessage() {}

func (x *ChapterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChapterInfo.ProtoReflect.Descriptor instead.
func (*ChapterInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{6}
}

func (x *ChapterInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ChapterInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChapterInfo) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *ChapterInfo) GetNumberPages() int32 {
	if x != nil {
		return x.NumberPages
	}
	return 0
}

func (x *ChapterInfo) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ChapterInfo) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_ST_IGNORE
}

func (x *ChapterInfo) GetReadingTime() int64 {
	if x != nil {
		return x.ReadingTime
	}
	return 0
}

// BookmarkInfo ...
type BookmarkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *BookmarkInfo) Reset() {
	*x = BookmarkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkInfo) ProtoMessage() {}

func (x *BookmarkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkInfo.ProtoReflect.Descriptor instead.
func (*BookmarkInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{7}
}

func (x *BookmarkInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BookmarkInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// TotalReactionInfo ...
type TotalReactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  ReactionType `protobuf:"varint,1,opt,name=Type,proto3,enum=stories.ReactionType" json:"Type,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *TotalReactionInfo) Reset() {
	*x = TotalReactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalReactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalReactionInfo) ProtoMessage() {}

func (x *TotalReactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalReactionInfo.ProtoReflect.Descriptor instead.
func (*TotalReactionInfo) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{8}
}

func (x *TotalReactionInfo) GetType() ReactionType {
	if x != nil {
		return x.Type
	}
	return ReactionType_RT_IGNORE
}

func (x *TotalReactionInfo) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// Paginator ...
type Paginator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           uint64 `protobuf:"varint,1,opt,name=Page,proto3" json:"Page,omitempty"`
	ResultsPerPage uint64 `protobuf:"varint,2,opt,name=ResultsPerPage,proto3" json:"ResultsPerPage,omitempty"`
}

func (x *Paginator) Reset() {
	*x = Paginator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paginator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paginator) ProtoMessage() {}

func (x *Paginator) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paginator.ProtoReflect.Descriptor instead.
func (*Paginator) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{9}
}

func (x *Paginator) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Paginator) GetResultsPerPage() uint64 {
	if x != nil {
		return x.ResultsPerPage
	}
	return 0
}

// Order ...
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Position int32  `protobuf:"varint,2,opt,name=Position,proto3" json:"Position,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{10}
}

func (x *Order) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Order) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

// Story ...
type Story struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string                `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title              string                `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Author             string                `protobuf:"bytes,3,opt,name=Author,proto3" json:"Author,omitempty"`
	IsMy               bool                  `protobuf:"varint,4,opt,name=IsMy,proto3" json:"IsMy,omitempty"`
	Tags               []string              `protobuf:"bytes,5,rep,name=Tags,proto3" json:"Tags,omitempty"`
	Category           *CategoryInfo         `protobuf:"bytes,6,opt,name=Category,proto3" json:"Category,omitempty"`
	Language           *LanguageInfo         `protobuf:"bytes,7,opt,name=Language,proto3" json:"Language,omitempty"`
	Writer             *UserInfo             `protobuf:"bytes,8,opt,name=Writer,proto3" json:"Writer,omitempty"`
	Cover              string                `protobuf:"bytes,9,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Status             StatusType            `protobuf:"varint,10,opt,name=Status,proto3,enum=stories.StatusType" json:"Status,omitempty"`
	Characters         []string              `protobuf:"bytes,11,rep,name=Characters,proto3" json:"Characters,omitempty"`
	Audience           AudienceType          `protobuf:"varint,12,opt,name=Audience,proto3,enum=stories.AudienceType" json:"Audience,omitempty"`
	Copyright          CopyrightType         `protobuf:"varint,13,opt,name=Copyright,proto3,enum=stories.CopyrightType" json:"Copyright,omitempty"`
	Clasification      ClasificationType     `protobuf:"varint,14,opt,name=Clasification,proto3,enum=stories.ClasificationType" json:"Clasification,omitempty"`
	CommentsModeration CommentModerationType `protobuf:"varint,15,opt,name=CommentsModeration,proto3,enum=stories.CommentModerationType" json:"CommentsModeration,omitempty"`
	Finished           bool                  `protobuf:"varint,16,opt,name=Finished,proto3" json:"Finished,omitempty"`
	CreatedAt          int64                 `protobuf:"varint,17,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt          int64                 `protobuf:"varint,18,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PublishedAt        int64                 `protobuf:"varint,19,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	TotalComments      int64                 `protobuf:"varint,20,opt,name=TotalComments,proto3" json:"TotalComments,omitempty"`
	TotalReadings      int64                 `protobuf:"varint,21,opt,name=TotalReadings,proto3" json:"TotalReadings,omitempty"`
	TotalShared        int64                 `protobuf:"varint,22,opt,name=TotalShared,proto3" json:"TotalShared,omitempty"`
	TotalCoffees       int64                 `protobuf:"varint,23,opt,name=TotalCoffees,proto3" json:"TotalCoffees,omitempty"`
	Description        string                `protobuf:"bytes,24,opt,name=Description,proto3" json:"Description,omitempty"`
	TotalReactions     []*TotalReactionInfo  `protobuf:"bytes,25,rep,name=TotalReactions,proto3" json:"TotalReactions,omitempty"`
	Chapters           []*ChapterInfo        `protobuf:"bytes,26,rep,name=Chapters,proto3" json:"Chapters,omitempty"`
}

func (x *Story) Reset() {
	*x = Story{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Story) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Story) ProtoMessage() {}

func (x *Story) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Story.ProtoReflect.Descriptor instead.
func (*Story) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{11}
}

func (x *Story) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Story) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Story) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Story) GetIsMy() bool {
	if x != nil {
		return x.IsMy
	}
	return false
}

func (x *Story) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Story) GetCategory() *CategoryInfo {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Story) GetLanguage() *LanguageInfo {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Story) GetWriter() *UserInfo {
	if x != nil {
		return x.Writer
	}
	return nil
}

func (x *Story) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Story) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_ST_IGNORE
}

func (x *Story) GetCharacters() []string {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *Story) GetAudience() AudienceType {
	if x != nil {
		return x.Audience
	}
	return AudienceType_AT_IGNORE
}

func (x *Story) GetCopyright() CopyrightType {
	if x != nil {
		return x.Copyright
	}
	return CopyrightType_CRT_IGNORE
}

func (x *Story) GetClasification() ClasificationType {
	if x != nil {
		return x.Clasification
	}
	return ClasificationType_CT_IGNORE
}

func (x *Story) GetCommentsModeration() CommentModerationType {
	if x != nil {
		return x.CommentsModeration
	}
	return CommentModerationType_CMT_IGNORE
}

func (x *Story) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *Story) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Story) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Story) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *Story) GetTotalComments() int64 {
	if x != nil {
		return x.TotalComments
	}
	return 0
}

func (x *Story) GetTotalReadings() int64 {
	if x != nil {
		return x.TotalReadings
	}
	return 0
}

func (x *Story) GetTotalShared() int64 {
	if x != nil {
		return x.TotalShared
	}
	return 0
}

func (x *Story) GetTotalCoffees() int64 {
	if x != nil {
		return x.TotalCoffees
	}
	return 0
}

func (x *Story) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Story) GetTotalReactions() []*TotalReactionInfo {
	if x != nil {
		return x.TotalReactions
	}
	return nil
}

func (x *Story) GetChapters() []*ChapterInfo {
	if x != nil {
		return x.Chapters
	}
	return nil
}

// Chapter ...
type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string               `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Title          string               `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	Content        string               `protobuf:"bytes,3,opt,name=Content,proto3" json:"Content,omitempty"`
	Cover          string               `protobuf:"bytes,4,opt,name=Cover,proto3" json:"Cover,omitempty"`
	Status         StatusType           `protobuf:"varint,5,opt,name=Status,proto3,enum=stories.StatusType" json:"Status,omitempty"`
	Position       int32                `protobuf:"varint,6,opt,name=Position,proto3" json:"Position,omitempty"`
	NumberPages    int32                `protobuf:"varint,7,opt,name=NumberPages,proto3" json:"NumberPages,omitempty"`
	ReadingTime    int64                `protobuf:"varint,8,opt,name=ReadingTime,proto3" json:"ReadingTime,omitempty"`
	StoryID        string               `protobuf:"bytes,9,opt,name=StoryID,proto3" json:"StoryID,omitempty"`
	WriterID       string               `protobuf:"bytes,10,opt,name=WriterID,proto3" json:"WriterID,omitempty"`
	CreatedAt      int64                `protobuf:"varint,11,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      int64                `protobuf:"varint,12,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	PublishedAt    int64                `protobuf:"varint,13,opt,name=PublishedAt,proto3" json:"PublishedAt,omitempty"`
	TotalComments  int64                `protobuf:"varint,14,opt,name=TotalComments,proto3" json:"TotalComments,omitempty"`
	TotalReadings  int64                `protobuf:"varint,15,opt,name=TotalReadings,proto3" json:"TotalReadings,omitempty"`
	TotalShared    int64                `protobuf:"varint,16,opt,name=TotalShared,proto3" json:"TotalShared,omitempty"`
	TotalCoffees   int64                `protobuf:"varint,17,opt,name=TotalCoffees,proto3" json:"TotalCoffees,omitempty"`
	TotalReactions []*TotalReactionInfo `protobuf:"bytes,18,rep,name=TotalReactions,proto3" json:"TotalReactions,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_commons_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_commons_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_commons_proto_rawDescGZIP(), []int{12}
}

func (x *Chapter) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Chapter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Chapter) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Chapter) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Chapter) GetStatus() StatusType {
	if x != nil {
		return x.Status
	}
	return StatusType_ST_IGNORE
}

func (x *Chapter) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Chapter) GetNumberPages() int32 {
	if x != nil {
		return x.NumberPages
	}
	return 0
}

func (x *Chapter) GetReadingTime() int64 {
	if x != nil {
		return x.ReadingTime
	}
	return 0
}

func (x *Chapter) GetStoryID() string {
	if x != nil {
		return x.StoryID
	}
	return ""
}

func (x *Chapter) GetWriterID() string {
	if x != nil {
		return x.WriterID
	}
	return ""
}

func (x *Chapter) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Chapter) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Chapter) GetPublishedAt() int64 {
	if x != nil {
		return x.PublishedAt
	}
	return 0
}

func (x *Chapter) GetTotalComments() int64 {
	if x != nil {
		return x.TotalComments
	}
	return 0
}

func (x *Chapter) GetTotalReadings() int64 {
	if x != nil {
		return x.TotalReadings
	}
	return 0
}

func (x *Chapter) GetTotalShared() int64 {
	if x != nil {
		return x.TotalShared
	}
	return 0
}

func (x *Chapter) GetTotalCoffees() int64 {
	if x != nil {
		return x.TotalCoffees
	}
	return 0
}

func (x *Chapter) GetTotalReactions() []*TotalReactionInfo {
	if x != nil {
		return x.TotalReactions
	}
	return nil
}

var File_commons_proto protoreflect.FileDescriptor

var file_commons_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x1b, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6b, 0x65, 0x79, 0x22, 0x6a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46,
	0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x22,
	0x47, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x70, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x32, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0x54, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x50, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x80, 0x08, 0x0a, 0x05, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x73, 0x4d, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x73, 0x4d, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x08,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x6f, 0x70,
	0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x43, 0x6c, 0x61, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x66,
	0x66, 0x65, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x43, 0x68,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd6, 0x04, 0x0a,
	0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x66, 0x66, 0x65, 0x65,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x2a,
	0x37, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x5f, 0x49,
	0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x5f, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54, 0x10, 0x03, 0x2a,
	0xb9, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10,
	0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x44, 0x4f, 0x4d,
	0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x53, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43,
	0x52, 0x54, 0x5f, 0x43, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x4e, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x2a, 0x0a,
	0x26, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4e, 0x4f,
	0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x53, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x52, 0x54,
	0x5f, 0x43, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x41,
	0x4c, 0x49, 0x4b, 0x45, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x52, 0x54, 0x5f, 0x43, 0x43,
	0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41,
	0x52, 0x45, 0x41, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x54,
	0x5f, 0x43, 0x43, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x53, 0x10, 0x08, 0x2a, 0x68, 0x0a, 0x11, 0x43,
	0x6c, 0x61, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x43,
	0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x44, 0x55, 0x4c, 0x54,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x4f, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x58,
	0x55, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4d, 0x54, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4d, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x4d, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4d, 0x54, 0x5f, 0x4b, 0x41, 0x54, 0x48, 0x45, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x0a, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x5f, 0x46, 0x41, 0x4c, 0x53,
	0x45, 0x10, 0x02, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x45, 0x72, 0x6e, 0x65, 0x73, 0x74, 0x6f, 0x47, 0x46, 0x2f, 0x62, 0x6f, 0x75, 0x6b,
	0x6b, 0x65, 0x72, 0x2d, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2d, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_commons_proto_rawDescOnce sync.Once
	file_commons_proto_rawDescData = file_commons_proto_rawDesc
)

func file_commons_proto_rawDescGZIP() []byte {
	file_commons_proto_rawDescOnce.Do(func() {
		file_commons_proto_rawDescData = protoimpl.X.CompressGZIP(file_commons_proto_rawDescData)
	})
	return file_commons_proto_rawDescData
}

var file_commons_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_commons_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_commons_proto_goTypes = []interface{}{
	(StatusType)(0),            // 0: stories.StatusType
	(ReactionType)(0),          // 1: stories.ReactionType
	(AudienceType)(0),          // 2: stories.AudienceType
	(CopyrightType)(0),         // 3: stories.CopyrightType
	(ClasificationType)(0),     // 4: stories.ClasificationType
	(CommentModerationType)(0), // 5: stories.CommentModerationType
	(BoolOption)(0),            // 6: stories.BoolOption
	(*RequestID)(nil),          // 7: stories.RequestID
	(*ResponseID)(nil),         // 8: stories.ResponseID
	(*CategoryInfo)(nil),       // 9: stories.CategoryInfo
	(*LanguageInfo)(nil),       // 10: stories.LanguageInfo
	(*UserInfo)(nil),           // 11: stories.UserInfo
	(*StoryInfo)(nil),          // 12: stories.StoryInfo
	(*ChapterInfo)(nil),        // 13: stories.ChapterInfo
	(*BookmarkInfo)(nil),       // 14: stories.BookmarkInfo
	(*TotalReactionInfo)(nil),  // 15: stories.TotalReactionInfo
	(*Paginator)(nil),          // 16: stories.Paginator
	(*Order)(nil),              // 17: stories.Order
	(*Story)(nil),              // 18: stories.Story
	(*Chapter)(nil),            // 19: stories.Chapter
}
var file_commons_proto_depIdxs = []int32{
	0,  // 0: stories.ChapterInfo.Status:type_name -> stories.StatusType
	1,  // 1: stories.TotalReactionInfo.Type:type_name -> stories.ReactionType
	9,  // 2: stories.Story.Category:type_name -> stories.CategoryInfo
	10, // 3: stories.Story.Language:type_name -> stories.LanguageInfo
	11, // 4: stories.Story.Writer:type_name -> stories.UserInfo
	0,  // 5: stories.Story.Status:type_name -> stories.StatusType
	2,  // 6: stories.Story.Audience:type_name -> stories.AudienceType
	3,  // 7: stories.Story.Copyright:type_name -> stories.CopyrightType
	4,  // 8: stories.Story.Clasification:type_name -> stories.ClasificationType
	5,  // 9: stories.Story.CommentsModeration:type_name -> stories.CommentModerationType
	15, // 10: stories.Story.TotalReactions:type_name -> stories.TotalReactionInfo
	13, // 11: stories.Story.Chapters:type_name -> stories.ChapterInfo
	0,  // 12: stories.Chapter.Status:type_name -> stories.StatusType
	15, // 13: stories.Chapter.TotalReactions:type_name -> stories.TotalReactionInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_commons_proto_init() }
func file_commons_proto_init() {
	if File_commons_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_commons_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LanguageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChapterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalReactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paginator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Story); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_commons_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_commons_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_commons_proto_goTypes,
		DependencyIndexes: file_commons_proto_depIdxs,
		EnumInfos:         file_commons_proto_enumTypes,
		MessageInfos:      file_commons_proto_msgTypes,
	}.Build()
	File_commons_proto = out.File
	file_commons_proto_rawDesc = nil
	file_commons_proto_goTypes = nil
	file_commons_proto_depIdxs = nil
}
